<%# Make sure to include the Material UI dependencies in your application %>
<%# Add to your application.html.erb: %>
<%# <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" /> %>
<%# <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" /> %>
<div class="appointments-container">
  <h2 class="appointments-title">Appointments</h2>
  
  <div class="filter-container">
    <div class="search-field">
      <i class="material-icons">search</i>
      <input type="text" id="appointmentSearch" placeholder="Search appointments..." onkeyup="filterAppointments()">
    </div>
    
    <div class="filter-status">
      <label for="statusFilter">Filter by status: </label>
      <select id="statusFilter" onchange="filterAppointments()">
        <option value="all">All</option>
        <option value="pending">Pending</option>
        <option value="confirmed">Confirmed</option>
        <option value="cancelled">Cancelled</option>
        <option value="completed">Completed</option>
      </select>
    </div>
  </div>
  
  <div class="table-container">
    <table id="appointmentsTable" class="appointments-table">
      <thead>
        <tr>
          <th onclick="sortTable(0)">Doctor <i class="material-icons sort-icon">sort</i></th>
          <th onclick="sortTable(1)">Patient <i class="material-icons sort-icon">sort</i></th>
          <th onclick="sortTable(2)">Date <i class="material-icons sort-icon">sort</i></th>
          <th onclick="sortTable(3)">Status <i class="material-icons sort-icon">sort</i></th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% @appointments.each do |appointment| %>
          <tr class="appointment-row" data-status="<%= appointment.status %>">
            <td><%= appointment.doctor.first_name %></td>
            <td><%= appointment.patient.name %></td>
            <td><%= appointment.date.strftime("%d %b %Y, %I:%M %p") %></td>
            <td>
              <span class="status-badge status-<%= appointment.status %>">
                <%= appointment.status.capitalize %>
              </span>
            </td>
            <td class="action-buttons">
              <% if current_doctor && appointment.status == "pending" %>
                <%= button_to confirm_appointment_path(appointment), method: :patch, remote: true, class: "btn btn-confirm" do %>
                  <i class="material-icons"></i> Confirm
                <% end %>
                <%= button_to cancel_appointment_path(appointment), method: :patch, remote: true, class: "btn btn-cancel" do %>
                  <i class="material-icons">cancel</i> Cancel
                <% end %>
              <% end %>
              <% if appointment.status == "confirmed" %>
  <%= link_to video_call_path(appointment.id), method: :post, class: "btn btn-video" do %>
    <i class="material-icons"></i> Start Video Call
  <% end %>
<% end %>

            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>
<style>
  /* Material UI inspired styles - Enhanced */
  .appointments-container {
    font-family: 'Roboto', sans-serif;
    padding: 32px;
    max-width: 1300px;
    margin: 40px auto;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .appointments-title {
    color: #3f51b5;
    font-weight: 600;
    font-size: 28px;
    margin-bottom: 32px;
    border-bottom: 2px solid #eeeeee;
    padding-bottom: 12px;
  }

  .filter-container {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    align-items: center;
    margin-bottom: 24px;
    gap: 16px;
  }

  .search-field {
    display: flex;
    align-items: center;
    background-color: #f0f0f0;
    padding: 10px 16px;
    border-radius: 6px;
    width: 320px;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .search-field input {
    border: none;
    background: transparent;
    margin-left: 10px;
    padding: 6px;
    width: 100%;
    font-size: 16px;
    outline: none;
    color: #333;
  }

  .filter-status label {
    font-weight: 500;
    margin-right: 8px;
    color: #555;
  }

  .filter-status select {
    padding: 10px 14px;
    border: 1px solid #ccc;
    border-radius: 6px;
    background-color: white;
    font-size: 15px;
    outline: none;
    transition: border-color 0.2s;
  }

  .filter-status select:focus {
    border-color: #3f51b5;
  }

  .table-container {
    overflow-x: auto;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .appointments-table {
    width: 100%;
    border-collapse: collapse;
  }

  .appointments-table th {
    background-color: #f9f9f9;
    padding: 16px;
    text-align: left;
    font-weight: 600;
    color: #555;
    cursor: pointer;
    position: sticky;
    top: 0;
    z-index: 2;
    border-bottom: 2px solid #eee;
    transition: background-color 0.2s;
  }

  .appointments-table th:hover {
    background-color: #f0f0f0;
  }

  .appointments-table td {
    padding: 18px 16px;
    border-bottom: 1px solid #eee;
    color: #444;
    background-color: #fff;
    transition: background-color 0.2s;
  }

  .appointments-table tr:nth-child(even) td {
    background-color: #fafafa;
  }

  .appointments-table tr:hover td {
    background-color: #f5faff;
  }

  .sort-icon {
    font-size: 18px;
    vertical-align: middle;
    margin-left: 6px;
    opacity: 0.5;
    transition: opacity 0.2s;
  }

  .status-badge {
    display: inline-block;
    padding: 6px 10px;
    border-radius: 14px;
    font-size: 13px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-pending {
    background-color: #fff4e5;
    color: #ffa000;
  }

  .status-confirmed {
    background-color: #e8f5e9;
    color: #388e3c;
  }

  .status-cancelled {
    background-color: #ffebee;
    color: #d32f2f;
  }

  .status-completed {
    background-color: #e3f2fd;
    color: #1976d2;
  }

  .action-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 16px;
    border-radius: 6px;
    font-size: 15px;
    font-weight: 500;
    cursor: pointer;
    text-decoration: none;
    border: none;
    transition: all 0.2s;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .btn i {
    margin-right: 6px;
    font-size: 18px;
  }

  .btn-confirm {
    background-color: #4caf50;
    color: white;
  }

  .btn-confirm:hover {
    background-color: #43a047;
    transform: translateY(-1px);
  }

  .btn-cancel {
    background-color: #f44336;
    color: white;
  }

  .btn-cancel:hover {
    background-color: #e53935;
    transform: translateY(-1px);
  }

  .btn-video {
    background-color: #2196f3;
    color: white;
  }

  .btn-video:hover {
    background-color: #1e88e5;
    transform: translateY(-1px);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .filter-container {
      flex-direction: column;
      align-items: stretch;
    }

    .search-field {
      width: 100%;
    }

    .appointments-table th,
    .appointments-table td {
      padding: 14px 12px;
    }
  }
</style>


<script>
  function sortTable(columnIndex) {
    const table = document.getElementById("appointmentsTable");
    let rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    switching = true;
    dir = "asc";
    
    while (switching) {
      switching = false;
      rows = table.rows;
      
      for (i = 1; i < (rows.length - 1); i++) {
        shouldSwitch = false;
        x = rows[i].getElementsByTagName("TD")[columnIndex];
        y = rows[i + 1].getElementsByTagName("TD")[columnIndex];
        
        // If it's the date column, parse as dates
        if (columnIndex === 2) {
          const dateX = new Date(x.innerHTML);
          const dateY = new Date(y.innerHTML);
          
          if (dir === "asc") {
            if (dateX > dateY) {
              shouldSwitch = true;
              break;
            }
          } else {
            if (dateX < dateY) {
              shouldSwitch = true;
              break;
            }
          }
        } else {
          // Regular string comparison
          if (dir === "asc") {
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          } else {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          }
        }
      }
      
      if (shouldSwitch) {
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        switchcount++;
      } else {
        if (switchcount === 0 && dir === "asc") {
          dir = "desc";
          switching = true;
        }
      }
    }
    
    // Update sort icons
    const headers = table.getElementsByTagName("TH");
    for (i = 0; i < headers.length; i++) {
      const icon = headers[i].getElementsByClassName("sort-icon")[0];
      if (i === columnIndex) {
        icon.innerHTML = dir === "asc" ? "arrow_upward" : "arrow_downward";
        icon.style.opacity = "1";
      } else {
        icon.innerHTML = "sort";
        icon.style.opacity = "0.5";
      }
    }
  }
  
  function filterAppointments() {
    const searchInput = document.getElementById("appointmentSearch").value.toLowerCase();
    const statusFilter = document.getElementById("statusFilter").value;
    const rows = document.getElementById("appointmentsTable").getElementsByTagName("TR");
    
    for (let i = 1; i < rows.length; i++) {
      const row = rows[i];
      const rowData = row.textContent.toLowerCase();
      const status = row.getAttribute("data-status");
      
      const matchesSearch = rowData.includes(searchInput);
      const matchesStatus = statusFilter === "all" || status === statusFilter;
      
      if (matchesSearch && matchesStatus) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    }
  }
</script>